// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Presistence;

namespace Presistence.Migrations
{
    [DbContext(typeof(RediSmsDbContext))]
    [Migration("20200805074557_Add_GenReportStatus")]
    partial class Add_GenReportStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.Operator", b =>
                {
                    b.Property<int>("OperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("OperatorName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RetryLimit")
                        .HasColumnType("integer");

                    b.Property<string>("UrlIn")
                        .HasColumnType("text");

                    b.Property<string>("UrlOut")
                        .HasColumnType("text");

                    b.HasKey("OperatorId");

                    b.ToTable("Operators");

                    b.HasData(
                        new
                        {
                            OperatorId = 51010,
                            OperatorName = "TELKOMSEL",
                            RetryLimit = 0
                        },
                        new
                        {
                            OperatorId = 51011,
                            OperatorName = "EXCELCOM",
                            RetryLimit = 0
                        },
                        new
                        {
                            OperatorId = 51021,
                            OperatorName = "INDOSAT",
                            RetryLimit = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.SMS.CampaignReport", b =>
                {
                    b.Property<int>("CampaignReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Churn_Member")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Mt_Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Mt_Sent")
                        .HasColumnType("integer");

                    b.Property<int>("New_Member")
                        .HasColumnType("integer");

                    b.Property<double>("Revenue")
                        .HasColumnType("double precision");

                    b.Property<int>("ServiceCampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("Total_Member")
                        .HasColumnType("integer");

                    b.HasKey("CampaignReportId");

                    b.HasIndex("ServiceCampaignId");

                    b.ToTable("CampaignReports");
                });

            modelBuilder.Entity("Domain.Entities.SMS.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContentPath")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ContentSchedule")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.HasKey("ContentId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("MessageId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Domain.Entities.SMS.ContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentTypes");

                    b.HasData(
                        new
                        {
                            ContentTypeId = 1,
                            Description = "PLAIN CONTENT",
                            Name = "TEXT"
                        },
                        new
                        {
                            ContentTypeId = 2,
                            Description = "RICH PICTURE CONTENT",
                            Name = "PICTURE"
                        },
                        new
                        {
                            ContentTypeId = 3,
                            Description = "RICH VIDEO CONTENT",
                            Name = "VIDEO"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SMS.GenReportStatus", b =>
                {
                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.ToTable("GenReports");
                });

            modelBuilder.Entity("Domain.Entities.SMS.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("KeyWord")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("KeywordId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("Domain.Entities.SMS.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Billing1")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Billing2")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Billing3")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<double>("Delay")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDnWatch")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDynamicBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRichContent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("MessageTxt")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("SidBilling")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Sparam")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("MessageId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SidBilling");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.SMS.RevenueReport", b =>
                {
                    b.Property<int>("RevenueReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Mt_Hits")
                        .HasColumnType("integer");

                    b.Property<int>("Mt_Sent")
                        .HasColumnType("integer");

                    b.Property<string>("Mt_Type")
                        .HasColumnType("text");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<double>("Revenue")
                        .HasColumnType("double precision");

                    b.Property<int>("SDC")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Sid")
                        .HasColumnType("text");

                    b.HasKey("RevenueReportId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RevenueReports");
                });

            modelBuilder.Entity("Domain.Entities.SMS.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ServiceCustom")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Shortcode")
                        .HasColumnType("integer");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("Shortcode");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.SMS.ServiceCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CampaignKeyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCallBackRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainKeyword")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("CampaignId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceCampaigns");
                });

            modelBuilder.Entity("Domain.Entities.SMS.ServiceRenewalConfiguration", b =>
                {
                    b.Property<int>("ServiceRenewalConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("ActiveDll")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSequence")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ScheduleDay")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleOrder")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleSequence")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("ServiceRenewalConfigurationId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRenewalConfigurations");
                });

            modelBuilder.Entity("Domain.Entities.SMS.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            Type = "Entertaiment"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            Type = "Sport"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            Type = "Games"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            Type = "Religion"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SMS.ShortCode", b =>
                {
                    b.Property<int>("Shortcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Shortcode");

                    b.ToTable("ShortCodes");

                    b.HasData(
                        new
                        {
                            Shortcode = 93450,
                            Created = new DateTime(2020, 8, 5, 14, 45, 56, 952, DateTimeKind.Local).AddTicks(4076),
                            CreatedBy = "InitialMigration",
                            Description = "HM Short Code"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SMS.Sid", b =>
                {
                    b.Property<string>("SidBilling")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("SidBilling");

                    b.ToTable("Sids");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsdnD", b =>
                {
                    b.Property<int>("SmsdnDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ErrorDesc")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MtTxId")
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("SmsdnDId");

                    b.HasIndex("MtTxId")
                        .IsUnique();

                    b.ToTable("SmsdnDs");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsdnHist", b =>
                {
                    b.Property<int>("SmsdnHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ErrorDesc")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MtTxId")
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("SmsdnHistId");

                    b.HasIndex("MtTxId")
                        .IsUnique();

                    b.ToTable("SmsdnHists");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsinD", b =>
                {
                    b.Property<int>("SmsindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mo_Message")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MotxId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("SmsindId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SmsinDs");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsinHist", b =>
                {
                    b.Property<int>("SmsinHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mo_Message")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MotxId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("SmsinHistId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SmsinHists");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsoutD", b =>
                {
                    b.Property<int>("SmsoutDId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateToProcessed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Iparam")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDnWatch")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("MtTxId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Mt_Message")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Sparam")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Trx_Status")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("SmsoutDId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SmsoutDs");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsoutHist", b =>
                {
                    b.Property<int>("SmsoutHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateProcessed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateToProcessed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Iparam")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDnWatch")
                        .HasColumnType("boolean");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("MtTxId")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Mt_Message")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID")
                        .HasColumnType("integer");

                    b.Property<string>("Sparam")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Trx_Status")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("SmsoutHistId");

                    b.HasIndex("MessageId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceID");

                    b.ToTable("SmsoutHists");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubKeyword", b =>
                {
                    b.Property<int>("SubKeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("KeywordId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("SubKeyWord")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("SubKeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("SubKeywords");
                });

            modelBuilder.Entity("Domain.Entities.SMS.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Last_Renew_Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Mt_Sent")
                        .HasColumnType("integer");

                    b.Property<int>("Mt_Success")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Next_Renew_Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Reg_Keyword")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Subscription_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Total_Revenue")
                        .HasColumnType("real");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubscriptionHist", b =>
                {
                    b.Property<int>("SubscriptionHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Last_Renew_Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("Mt_Sent")
                        .HasColumnType("integer");

                    b.Property<int>("Mt_Success")
                        .HasColumnType("integer");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Reg_Keyword")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Subscription_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Total_Revenue")
                        .HasColumnType("real");

                    b.Property<string>("Unreg_keyword")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Unsubscription_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SubscriptionHistId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SubscriptionHists");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubscriptionReport", b =>
                {
                    b.Property<int>("SubscriptionReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Churn_Member")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("New_Member")
                        .HasColumnType("integer");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("SDC")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<int>("Total_Member")
                        .HasColumnType("integer");

                    b.HasKey("SubscriptionReportId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SubscriptionReports");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Presistence.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Entities.SMS.CampaignReport", b =>
                {
                    b.HasOne("Domain.Entities.SMS.ServiceCampaign", "ServiceCampaign")
                        .WithMany("CampaignReports")
                        .HasForeignKey("ServiceCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.Content", b =>
                {
                    b.HasOne("Domain.Entities.SMS.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.Keyword", b =>
                {
                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("Keywords")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.Message", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("Messages")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("Messages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Sid", "Sid")
                        .WithMany("Messages")
                        .HasForeignKey("SidBilling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.RevenueReport", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("RevenueReports")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("RevenueReports")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.Service", b =>
                {
                    b.HasOne("Domain.Entities.SMS.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.ShortCode", "ShortCode")
                        .WithMany("Services")
                        .HasForeignKey("Shortcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.ServiceCampaign", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("ServiceCampaigns")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("ServiceCampaigns")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.ServiceRenewalConfiguration", b =>
                {
                    b.HasOne("Domain.Entities.SMS.Message", "Message")
                        .WithMany("ServiceRenewalConfigurations")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("ServiceRenewalConfigurations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsdnD", b =>
                {
                    b.HasOne("Domain.Entities.SMS.SmsoutD", "SmsoutD")
                        .WithOne("SmsdnD")
                        .HasForeignKey("Domain.Entities.SMS.SmsdnD", "MtTxId")
                        .HasPrincipalKey("Domain.Entities.SMS.SmsoutD", "MtTxId");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsdnHist", b =>
                {
                    b.HasOne("Domain.Entities.SMS.SmsoutHist", "SmsoutHist")
                        .WithOne("SmsdnHist")
                        .HasForeignKey("Domain.Entities.SMS.SmsdnHist", "MtTxId")
                        .HasPrincipalKey("Domain.Entities.SMS.SmsoutHist", "MtTxId");
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsinD", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsinHist", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsoutD", b =>
                {
                    b.HasOne("Domain.Entities.SMS.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SmsoutHist", b =>
                {
                    b.HasOne("Domain.Entities.SMS.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubKeyword", b =>
                {
                    b.HasOne("Domain.Entities.SMS.Keyword", "Keyword")
                        .WithMany("SubKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubscriptionHist", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("SubscriptionHists")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("GetSubscriptionHists")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SMS.SubscriptionReport", b =>
                {
                    b.HasOne("Domain.Entities.Operator", "Operator")
                        .WithMany("SubscriptionReports")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SMS.Service", "Service")
                        .WithMany("SubscriptionReports")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Presistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Presistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Presistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Presistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
